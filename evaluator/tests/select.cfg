#
#   Context-free grammar for generating SQL statements
#   Note: MSSQL ignores aliases in HAVING, while MySQL, Oracle, U-SQL support 
#
#   Special tokens supported by the generator:
#       null -> empty terminal symbol
#       rand_int(m,n) -> random between m and n
#       rand_float(m,n) -> random float between m and n
#       rand_string(n) -> random string with n characters
#       collapse(token) -> collapse spaces for all children when printing 
#
statement -> select colexprs from rowset where? group? having? order?
select -> 'SELECT'
from -> 'FROM'
rowset -> table 
#subquery -> '(' select colexprs from table where? group? having? ')'
where -> 'WHERE' cond
having -> 'HAVING' cond
group -> groupby colnames
colexprs -> '*' | colexpr+
colexpr -> expr 'AS' alias | colname | aggexpr 'AS' alias
aggexpr -> agg '(' numexpr ')'
agg -> 'COUNT' | 'SUM' | 'AVG' | 'MIN' | 'MAX' | 'MEDIAN'
expr -> colname | numexpr | val
numexpr -> colname | numval | numexpr op numexpr 
# numexpr -> unary '(' nemexpr ')'
# unary -> '~' | '-' 
op -> '+' | '-' | '/' | '*' | '%'
colnames -> colname+
outcol -> colname | alias
cond -> bool | bool 'AND' bool | bool 'OR' bool
cond -> '(' cond 'AND' cond ')'
bool -> colname comp col_or_val
comp -> '=' | '!=' | '>=' | '<=' | '<' | '>'
numval -> float | int
val -> numval | string
col_or_val -> colname | val
groupby -> 'GROUP' 'BY'
orderdir -> 'ASC' | 'DESC'
ordercol -> outcol orderdir?
order -> orderby ordercol+
orderby -> 'ORDER' 'BY'

#
# These can be loaded from actual values in a database after loading grammar
#
# table -> 'Orders' | 'Invoices' | 'Contacts' | 'Sales'
table -> 'dataset.dataset'
# colname -> 'ID' | 'Date' | 'Name' | 'Sales'
colname -> 'UserId' | 'Segment' | 'Role' | 'Usage'
# alias ->  'ID_out' | 'Event_Date' | 'Item_name' | 'Total_Sales'
alias ->  'UserId' | 'Segment' | 'Role' | 'Usage'
float -> rand_float(-1.0,100.0)
int -> collapse(digit{1,5})
digit -> '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0'
# string -> '"Sally"' | '"Shipping"' | '"December"' | '"#NA#"' | rand_string(6)
string -> '"A"' | '"B"' | '"C"' | '"R1"' | '"R2"' | rand_string(6)

